二、列表生成式和生成器

1.列表生成式

range()

    #1.range(),生成一个容器，其中的元素是等差数列，step表示差值
    r0 = range(10)
    r1 = range(1,10,2)
    r2 = range(0,10,2)
    #r4 = range(1,10,0.5)  #TypeError: 'float' object cannot be interpreted解释 as an integer
    
    
    #列表生成式：List Comprehensions,是Python内置的专门用来生成列表的工具
    #语法：[元素的规律  for循环  if判断]，if判断可以省略
    
    #2.需求：生成一个列表，列表为[1,4,9,16,25,36]
    #list1 = [1,4,9,16,25,36]
    #方式一
    newList1 = []
    for i in range(1,7):
        newList1.append(i ** 2)
    print(newList1)
    
    #方式二
    newList2 = [i ** 2 for i in range(1,7)]
    print(newList2)
    print(type(newList2))
    
    #方式三
    list1 = [1,2,3,4,5,6]
    newList3 = [i ** 2 for i in list1]
    print(newList3)
    
    #3.需求：生成一个列表，列表为[1,9,25,49,81]
    #方式一
    newList1 = []
    for i in range(1,10):
        if i % 2 == 1:
            newList1.append(i ** 2)
    print(newList1)
    
    #方式二
    newList2 = [i ** 2 for i in range(1,10) if i % 2 == 1]
    print(newList2)
    
    #4.在列表生成式中使用嵌套for循环
    #方式一
    newList1 = []
    for a in "abc":
        for b in "xyz":
            newList1.append(a + b)
    print(newList1)
    
    #方式二
    newList2 = [a + b for a in "abc" for b in "xyz"]
    print(newList2)
    
    #5.for循环中可以使用多个变量
    #方式一
    newList1 = []
    dict1 = {"0":"a","1":"b"}
    for key,value in dict1.items():
        #print(key,value)
        newList1.append(key + "=" + value)
    print(newList1)
    
    #方式二
    newList2 = [key + "=" + value for key,value in dict1.items()]
    print(newList2)
    
    
    #6。练习：将已知列表中的字母全部改为大写，生成一个新的列表
    list1 = ["abc","Hello","HDfage"]
    #方式一
    newList1 = []
    for ele in list1:
        newList1.append(ele.upper())
    print(newList1)
    
    #方式二
    newList2 = [ele.upper() for ele in list1]
    print(newList2)
    
    #需求：封装一个函数，将任意一个列表中的字母转换为大写，将对应的元素生成 一个新的列表
    #方式一
    def createList(list1):
        #isalpha   isalnum   isdigit，但是只能判断字符串
        #isinstance(变量，类型)，判断一个变量是否是指定的数据类型
        newList1 = []
        for ele in list1:
            if isinstance(ele,str):
                newList1.append(ele.upper())
        return newList1
    print(createList([23,"abc","Hello"]))
    
    #方式二
    newList2 = [ele.upper() for ele in [23,"abc","Hello"] if isinstance(ele,str)]
    print(newList2)

2.生成器

通过列表生成式，可以直接创建一个列表，但是，受到内存限制，列表的容量是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的空间，如果仅仅需要访问列表中的前几个元素，则后面的大多数元素会浪费空间

解决：如果列表元素可以通过某种算法推算出来，只有在访问元素的时候通过该算法才生成对应的元素，不必创建完整的list，从而节省大量的空间，在Python中，这种一遍循环一遍计算的机制，被称为生成器【Generator】

生成器的定义方式：

	a.将列表生成式中的[]改为()

	b.通过yield关键字结合函数生成

方式一

    #1.列表生成式
    list1 = [i * 2 for i in range(10)]
    print(list1)   #[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
    print(type(list1))  #<class 'list'>
    for num in list1:
        print(num)
    
    #2.生成器
    #注意：仅仅是将列表生成式中的[]改为().其他的用法完全相同
    gene1 = (i * 2 for i in range(10) if i % 2 == 0)
    print(gene1)  #generator object <genexpr> at 0x0000024516929888>
    print(type(gene1))  #<class 'generator'>
    print(list(gene1))  #[0, 4, 8, 12, 16]
    
    #print(len(gene1))  #TypeError: object of type 'generator' has no len()
    
    #遍历生成器
    #方式一：for循环
    # for num in gene1:
    #     print(num)
    
    #方式二：next()
    # print(next(gene1))
    # print(next(gene1))
    # print(next(gene1))
    # print(next(gene1))
    # print(next(gene1))
    # for _ in range(5):
    #     print(next(gene1))
    
    #注意：当生成器中的元素全部被遍历完成，再次进行获取，则会报错
    #print(next(gene1))  #StopIteration

方式二

    #yield关键字结合函数
    #yield:让步，暂停
    
    def func1(n):
        for i in range(n + 1):
            print("hello",i)
            yield i * 2
            print(i)
    
    result = func1(10)
    print(result)  #<generator object func1 at 0x0000027253D4B888>
    
    # t1 = next(result)
    # print("abc",t1)
    # t2 = next(result)
    # print("abc",t2)
    # t3 = next(result)
    # print("abc",t3)
    # t4 = next(result)
    # print("abc",t4)
    
    for num in result:
        print(num)
    
    #结论：每次通过调用next函数，函数生成器会走到yield停止，将yield后面的数返回，代码停止，
        # 下次调用next的时候，函数生成器再从下面的代码继续执行
    
    
    #工作原理模拟：
    def func2(n):
        list1 = []
        for i in range(n + 1):
            list1.append(i * 2)
        return list1
    #生成器类似于返回一个列表的函数，这个函数可以接收参数，可以被调用，但是，
        # 不同于一般函数的地方：生成器的函数不会一次性返回包括所有元素的列表，生成器一次只能生成一个数据
        #这样可以减少内存的消耗

三、可迭代对象和迭代器

1.可迭代对象

可以直接作用于for循环的对象被称为可迭代对象【Iterable】

可以直接作用于for循环的数据类型：

	a.一类是集合类型：如list,tuple.dict,set,string

	b.一类是生成器，包括generator和yield的generator function

isinstance(x,类型)

    from collections import  Iterable
    
    print(isinstance([],Iterable))
    print(isinstance((),Iterable))
    print(isinstance({},Iterable))
    print(isinstance({23,43,4},Iterable))
    print(isinstance((x for x in range(6)),Iterable))
    print(isinstance("ahfa",Iterable))
    
    print(isinstance(4,Iterable))
    print(isinstance(True,Iterable))

2.迭代器

不但可以作用于for循环，也可以通过next获取元素值的对象被称为迭代器【Iterator】

不但可以作用于for循环，也可以通过next获取元素值的数据类型：

	a.生成器

总结：

不同点：

	a.可迭代对象：可以直接作用于for循环的对象，如list,tuple.dict,set,string，生成器

	b.迭代器：不但可以作用于for循环，也可以通过next获取元素值的对象，如生成器

联系：

	a.迭代器一定是可迭代对象，可迭代对象不一定是迭代器

	b.通过iter()可以将可迭代对象转换为迭代器

    from collections import  Iterator
    
    print(isinstance([],Iterator))
    print(isinstance((),Iterator))
    print(isinstance({},Iterator))
    print(isinstance({23,43,4},Iterator))
    print(isinstance((x for x in range(6)),Iterator))
    print(isinstance("ahfa",Iterator))
    
    print(isinstance(4,Iterator))
    print(isinstance(True,Iterator))
    
    print(isinstance(iter([]),Iterator))
    print(isinstance(iter(()),Iterator))
    print(isinstance(iter({}),Iterator))
    print(isinstance(iter({23,43,4}),Iterator))
    print(isinstance(iter("ahfa"),Iterator))

四、函数递归

递归函数：一个会调用自身的函数

递归调用

递归包含了一种隐式的循环，它会重复执行某段代码，但是这种重复无须条件控制

使用递归解决问题的思路：

	a.找到一个临界值【隐式的循环停下来的条件】

	b.找到相邻两次隐式循环之间的关系【规律】

    #1.需求：报一个数，输出数列中对应的数据
    """
    斐波那契数列：
    1 2 3 4 5 6  7  8  9 10  11
    1,1,2,3,5,8,13,21,34,55,89.....
    
    
    规律：
        a.第1个位置和第2个位置上的数是固定的，是1
        b.第n个位置上的数 = 第n - 1个位置上的数  + 第n - 2个位置上的数
    
    分析：报5，求5位置上的数
    5
    fun(5) = fun(4) + fun(3)
    4
    fun(4) = fun(3) + fun(2)  1
    3
    fun(3) = fun(2) + fun(1)
    3
    fun(3) = fun(2) + fun(1)
    ...
    fun(n) = fun(n - 1) + fun(n - 2)
    """
    
    def fun(n):
        if n <= 0:
          return 0
        elif n == 1 or n == 2:
            return 1
        else:
            result = fun(n - 1) + fun(n - 2)
            return result
    
    print(fun(5))
    print(fun(10))
    
    #注意：递归：函数执行的过程中相互之间是有关联的，主要通过上一次执行的结果参与下一次运算【return】
    
    #2.需求：计算1~某个数之间所有整数的和，用递归实现
    def func1(num):
        sum = 0
        n = 1
        while n <= num:
            sum += n
            n += 1
        return sum
    
    """
    func(10) = func(9) + 10
    func(9) = func(8) + 9
    ...
    func(n) = func(n - 1) + n
    """
    def func(num):
        if num <= 0:
            return 0
        elif num == 1:
            return  1
        else:
            return func(num - 1) + num
    print(func(100))
    
    #优点：逻辑简单，代码清晰，缺点：过深的递归会导致栈溢出【内存溢出】

五、栈和队列

栈：Stack,是限定在表的一端进行插入和删除操作的线性表

队列：Queue,是限定在表的一端进行插入，在表的另外一端进行删除操作的线性表

线性表：是一种线性结构，相当于是一个容器，可以进行插入和删除的操作，在进行插入和删除操作的时候具有一定的规律

栈和队列的相同点：

	a.都是线性结构

	b.插入操作都是限定在表尾进行的

	c.都可以通过顺序结构和链式结构实现

	d.插入和删除的时间复杂度和空间复杂度是一样的

栈和队列的不同点：

	a.删除元素的位置不同，栈的删除操作在表尾进行，队列的删除操作在表头进行

	b.应用场景不同：常用栈的应用场景： 变量的定义和删除，表达式的转换和求值，函数的定义和调用，深度优先搜索遍历；常用队列的应用场景：计算机中各种资源的分配问题，消息缓冲管理，广度优先搜索遍历

1.栈

插入：append()

删除：pop()

    #栈：先进后出，后进先出【抽象成一个开口向上的容器】
    
    stack = []
    print(stack)
    
    #入栈【向栈中添加数据】
    stack.append(10)
    print(stack)
    stack.append(20)
    print(stack)
    stack.append(30)
    print(stack)
    stack.append(40)
    print(stack)
    
    #出栈【从栈中删除数据】
    stack.pop()
    print(stack)
    stack.pop()
    print(stack)
    stack.pop()
    print(stack)
    stack.pop()
    print(stack)

2.队列

插入：append()

删除：popleft()

    #队列：先进先出，后进后出【抽象成一个水平放置的水管】
    
    #import  collections
    from  collections import  *
    
    queue = deque()
    print(queue,type(queue))
    
    #入队【向队列中添加数据】
    queue.append(10)
    print(queue)
    queue.append(20)
    print(queue)
    queue.append(30)
    print(queue)
    queue.append(40)
    print(queue)
    
    #出队【从队列中删除数据】
    queue.popleft()
    print(queue)
    queue.popleft()
    print(queue)
    queue.popleft()
    print(queue)
    queue.popleft()
    print(queue)

六、目录遍历

1.os模块

os:operation system,是Python提供的专门用来访问系统磁盘的模块，可以操作文件或者目录

    #import  os
    from  os import  *
    
    #C:\Users\Administrator\Desktop\XA-Python1903
    
    #1.书写路径的时候，不管是相对路径还是绝对路径，都通过r"xxx"书写
    dirpath = r"C:\Users\Administrator\Desktop\XA-Python1903"
    print(dirpath)
    
    #2.listdir(xx),列出一个指定目录下所有的内容，包括文件和目录
    #返回一个列表，其中的元素是指定路径下所有文件和目录的名称的字符串
    r = listdir(dirpath)
    print(r)
    
    #C:\Users\Administrator\Desktop\XA-Python1903\Day10
    
    #3.join(父路径，子路径),将两个已知的路径拼接一个路径
    subPath1 = dirpath + "\\" + "Day10"
    print(subPath1)
    
    #os.path.join(),os.path模块下的函数
    subPath2 = path.join(dirpath,"Day10")
    print(subPath2)
    
    #将dirpath下的所有的子路径获取出来
    filePath = []
    for fileName in r:
        filePath.append(path.join(dirpath,fileName))
    print(filePath)
    
    #4.isfile(xx)，判断指定的路径是否是文件   isdir()判断指定的路径是否是目录
    print(path.isfile('C:\\Users\\Administrator\\Desktop\\XA-Python1903\\万年历要求与思路.bmp'))
    print(path.isdir('C:\\Users\\Administrator\\Desktop\\XA-Python1903\\万年历要求与思路.bmp'))
    
    print(path.isfile('C:\\Users\\Administrator\\Desktop\\XA-Python1903\\Day9'))
    print(path.isdir('C:\\Users\\Administrator\\Desktop\\XA-Python1903\\Day9'))

2.递归遍历目录

    #递归遍历目录
    #思路：对指定的一个路径进行判断，如果是目录，则获取其中的内容，不管目录的层级关系如何复杂，
    # 只要是文件则直接打印，如果是目录，则继续向里面判断。。。。。
    import  os
    
    def getAllFile(srcpPath):
        if os.path.isfile(srcpPath):
            print("文件：",srcpPath)
            return
    
        #代码执行到此处，则说明当前路径是目录，获取
        #获取指定目录下所有的内容
        fileList = os.listdir(srcpPath)
    
        #遍历列表，获取其中的文件或者目录的名称
        for fileName in fileList:
            #拼接路径
            filePath = os.path.join(srcpPath,fileName)
    
            #判断子路径是文件还是目录
            if os.path.isdir(filePath):
                print("目录：",filePath)
                #重复前面的操作，接着获取目录中的内容【递归】
                getAllFile(filePath)
            else:
                print("文件：",filePath)
    
    #主函数：一个程序的入口
    if __name__ == "__main__":
        p = r"C:\Users\Administrator\Desktop\XA-Python1903"
        getAllFile(p)

3.栈模拟递归遍历目录

    #栈：先进后出，后进先出
    
    #深度遍历
    
    #思路：如果路径是目录，则将其添加到栈中，如果要继续操作该目录，则将该目录从栈中删除
    import  os
    def getAllFile(srcpath):
        if os.path.isfile(srcpath):
            print("文件：",srcpath)
            return
    
        stack = []
    
        #将原始路径添加到栈中
        stack.append(srcpath)
    
        #处理栈，当栈为空时则表示循环结束，表示所有的文件都被获取完成
        while len(stack) != 0:
            print(stack)
            #从栈中取出数据
            dirpath = stack.pop()
    
            #获取指定目录下的所有内容
            fileList = os.listdir(dirpath)
    
            #遍历，
            for fileName in fileList:
                #拼接路径
                filePath = os.path.join(dirpath,fileName)
    
                if os.path.isdir(filePath):
                    #如果是目录，则追加到栈中
                    stack.append(filePath)
                else:
                    print("文件:",filePath)
    if __name__ == "__main__":
        p = r"C:\Users\Administrator\Desktop\XA-Python1903"
        getAllFile(p)

4.队列模拟递归遍历目录

    #队列：先进先出，后进后出
    
    #广度遍历
    
    #思路：如果路径是目录，则将其添加到栈中，如果要继续操作该目录，则将该目录从栈中删除
    import  os
    from collections import  *
    
    def getAllFile(srcpath):
        if os.path.isfile(srcpath):
            print("文件：",srcpath)
            return
    
        queue = deque()
    
        #将原始路径添加到队列中
        queue.append(srcpath)
    
        #处理队列，当队列为空时则表示循环结束，表示所有的文件都被获取完成
        while len(queue) != 0:
            print(queue)
            #从栈队列中取出数据
            dirpath = queue.popleft()
    
            #获取指定目录下的所有内容
            fileList = os.listdir(dirpath)
    
            #遍历，
            for fileName in fileList:
                #拼接路径
                filePath = os.path.join(dirpath,fileName)
    
                if os.path.isdir(filePath):
                    #如果是目录，则追加到栈中
                    queue.append(filePath)
                else:
                    print("文件:",filePath)
    if __name__ == "__main__":
        p = r"C:\Users\Administrator\Desktop\XA-Python1903"
        getAllFile(p)


