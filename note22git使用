一、git的使用

1.git简介

如果你用Word写过毕业论文，那你一定有这样的经历：

想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档就会变得乱七八糟

过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。

看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。

更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。

于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？

这个软件用起来就应该像这个样子，能记录每次文件的改动：

  版本  	文件名        	用户  	说明            	日期        
  1   	service.doc	张三  	删除了软件服务条款5    	7/12 10:38
  2   	service.doc	张三  	增加了License人数限制	7/12 18:09
  3   	service.doc	李四  	财务部门调整了合同金额   	7/13 9:51 
  4   	service.doc	张三  	延长了免费升级周期     	7/14 15:17

这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。

Git是目前世界上最先进的分布式版本控制系统（没有之一）。

Git有什么特点？简单来说就是：高端大气上档次！

1.2git的由来

	很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。

	Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？

	事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！

	你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。

	不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。

	安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。

	Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：

	Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。

	Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。

历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了

1.3集中式和分布式

git和SVN都是用来进行版本控制的工具

git是一个分布式版本控制系统，svn是一个集中式的版本控制系统

集中式的版本控制系统：版本库是集中存放在中央服务器上的，缺点：必须联网才能进行工作

分布式版本控制系统：没有中央服务器，每个人的电脑上都有一个独立的版本库，只要将自己的修改推送给对方即可

git是一个工具，github是一个网站，可以充当一个服务器

2.安装git

    sudo apt-get install git
    
    出现的错误：
    
    可能的错误：
    sudo rm /var/cache/apt/archives/lock
    sudo rm /var/lib/dpkg/lock 

3.创建版本库

3.1什么是版本库

又被称为仓库，英文名为repository,初期理解为一个目录，只是该目录内的所有的内文件全部被git所管理，每个文件的增加，删除以及修改等都会被git追踪，记录历史版本以便于在未来的某个时机可以回到过去的某个版本

3.2创建本地版本库

    演示命令：
    yangyang@yangyang-host:~/Desktop$ mkdir python1903
    yangyang@yangyang-host:~/Desktop$ ls
    python1903
    yangyang@yangyang-host:~/Desktop$ cd python1903/
    yangyang@yangyang-host:~/Desktop/python1903$ pwd
    /home/yangyang/Desktop/python1903
    yangyang@yangyang-host:~/Desktop/python1903$ git init
    已初始化空的 Git 仓库于 /home/yangyang/Desktop/python1903/.git/
    yangyang@yangyang-host:~/Desktop/python1903$ ls -a
    .  ..  .git
    yangyang@yangyang-host:~/Desktop/python1903$ 
      
    #python1903是一个工作区【Working】，在工作区中进行文件的增加，删除以及文件内容的修改
    #python1903里面.git目录是版本库【仓库】，如果工作区中的工作完成，将工作区中的内容提交到版本库
    

3.3将工作区中的内容提交到版本库

    yangyang@yangyang-host:~/Desktop/python1903$ ls
    a1.txt
    
    #暂存区 ：git add a1.txt 将a1.txt文件从工作区添加到暂存区
    yangyang@yangyang-host:~/Desktop/python1903$ git add a1.txt  
    # git status随时查看工作区和版本库之间的差异
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    
    尚无提交
    
    要提交的变更：
      （使用 "git rm --cached <文件>..." 以取消暂存）
    
    	新文件：   a1.txt
    #将暂存区中的内容提交到版本库
    #注意：一定要书写提交日志，便于以后恢复历史版本
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "create a new file named a1.txt"
    
    *** 请告诉我你是谁。
    
    运行
    
      git config --global user.email "you@example.com"
      git config --global user.name "Your Name"
    
    来设置您账号的缺省身份标识。
    如果仅在本仓库设置身份标识，则省略 --global 参数。
    fatal: 无法自动探测邮件地址（得到 'yangyang@yangyang-host.(none)'）
    #配置用户信息
    yangyang@yangyang-host:~/Desktop/python1903$ git config --global user.email "18501970795@163.com"
    yangyang@yangyang-host:~/Desktop/python1903$  git config --global user.name "yangyang-git"
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "create a new file named a1.txt"
    [master（根提交） 6864902] create a new file named a1.txt
     1 file changed, 0 insertions(+), 0 deletions(-)
     create mode 100644 a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    无文件要提交，干净的工作区
    yangyang@yangyang-host:~/Desktop/python1903$ vim a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    尚未暂存以备提交的变更：
      （使用 "git add <文件>..." 更新要提交的内容）
      （使用 "git checkout -- <文件>..." 丢弃工作区的改动）
    
    	修改：     a1.txt
    
    修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
    yangyang@yangyang-host:~/Desktop/python1903$ git add a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ touch b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git add b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "modify a1.txt and create new file named b1.txt"
    [master d0075e1] modify a1.txt and create new file named b1.txt
     2 files changed, 1 insertion(+)
     create mode 100644 b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    无文件要提交，干净的工作区
    
    
    #add仅仅是将内容添加到暂存区，追踪的是文件的改动，git add filename
    #commit是将暂存区中的所有的内容全部提交到版本库，git commit -m "xxxx"

4.时光穿梭机

4.1回退版本

版本号：commit id,只要执行一次git commit命令，就会产生一个历史版本，相当于对当前的版本做了快照，如果要回退版本，只需要找到版本号即可

HEAD:是一个指针，永远指向最新一次的提交【commit】

回到上一个版本：git reset --hard HEAD^

回到上上一个版本：git reset --hard HEAD^^

回到上100个版本：git reset --hard HEAD~100

    演示命令：
    yangyang@yangyang-host:~/Desktop/python1903$ vim b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git add b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "bbbb"
    [master 94ac33b] bbbb
     1 file changed, 1 insertion(+)
    yangyang@yangyang-host:~/Desktop/python1903$ git log
    commit 94ac33b7de4a4293a7e4255343a93c1d561e492e (HEAD -> master)
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:47:17 2019 +0800
    
        bbbb
    
    commit d0075e1b7b56c9fe3166f01ac1345648e569168c
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:43:35 2019 +0800
    
        modify a1.txt and create new file named b1.txt
    
    commit 6864902d371360124d375b08f98a5016bbb9cded
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:37:02 2019 +0800
    
        create a new file named a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git log --pretty=oneline
    94ac33b7de4a4293a7e4255343a93c1d561e492e (HEAD -> master) bbbb
    d0075e1b7b56c9fe3166f01ac1345648e569168c modify a1.txt and create new file named b1.txt
    6864902d371360124d375b08f98a5016bbb9cded create a new file named a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    yangyang@yangyang-host:~/Desktop/python1903$ cat b1.txt 
    bbbbbbb
    yangyang@yangyang-host:~/Desktop/python1903$ git reset --hard HEAD^
    HEAD 现在位于 d0075e1 modify a1.txt and create new file named b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git log
    commit d0075e1b7b56c9fe3166f01ac1345648e569168c (HEAD -> master)
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:43:35 2019 +0800
    
        modify a1.txt and create new file named b1.txt
    
    commit 6864902d371360124d375b08f98a5016bbb9cded
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:37:02 2019 +0800
    
        create a new file named a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ vim b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git reset --hard 94ac33b7
    HEAD 现在位于 94ac33b bbbb
    yangyang@yangyang-host:~/Desktop/python1903$ git log
    commit 94ac33b7de4a4293a7e4255343a93c1d561e492e (HEAD -> master)
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:47:17 2019 +0800
    
        bbbb
    
    commit d0075e1b7b56c9fe3166f01ac1345648e569168c
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:43:35 2019 +0800
    
        modify a1.txt and create new file named b1.txt
    
    commit 6864902d371360124d375b08f98a5016bbb9cded
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:37:02 2019 +0800
    
        create a new file named a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat b1.txt 
    bbbbbbb
    yangyang@yangyang-host:~/Desktop/python1903$ git reset --hard 6864902d371
    HEAD 现在位于 6864902 create a new file named a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git log
    commit 6864902d371360124d375b08f98a5016bbb9cded (HEAD -> master)
    Author: yangyang-git <18501970795@163.com>
    Date:   Wed Jul 17 15:37:02 2019 +0800
    
        create a new file named a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ ls
    a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git reset --hard 94ac33b7
    HEAD 现在位于 94ac33b bbbb
    yangyang@yangyang-host:~/Desktop/python1903$ ls
    a1.txt  b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    yangyang@yangyang-host:~/Desktop/python1903$ 

总结：

	a.HEAD指向的版本是最新版本，，因此，git允许在不同的版本之间进行来回切换，使用git reset --hard commitid

	b.切换版本之前，可以借助于git log【git log --pretty=oneline】查看提交的历史记录，以便于确定需要切换的版本号

	c.要回到未来的版本，使用git reflog查看历史命令，以便于确定需要切换的版本号

4.2撤销管理

a.改动了工作区，取消工作区的改动

    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    无文件要提交，干净的工作区
    yangyang@yangyang-host:~/Desktop/python1903$ vim a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    32546345
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    尚未暂存以备提交的变更：
      （使用 "git add <文件>..." 更新要提交的内容）
      （使用 "git checkout -- <文件>..." 丢弃工作区的改动）
    
    	修改：     a1.txt
    
    修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
    yangyang@yangyang-host:~/Desktop/python1903$ git checkout -- a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    

b.改动了工作区，add了暂存区，取消暂存区的添加

    yangyang@yangyang-host:~/Desktop/python1903$ vim a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    尚未暂存以备提交的变更：
      （使用 "git add <文件>..." 更新要提交的内容）
      （使用 "git checkout -- <文件>..." 丢弃工作区的改动）
    
    	修改：     a1.txt
    
    修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
    yangyang@yangyang-host:~/Desktop/python1903$ git add a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git status
    位于分支 master
    要提交的变更：
      （使用 "git reset HEAD <文件>..." 以取消暂存）
    
    	修改：     a1.txt
    
    yangyang@yangyang-host:~/Desktop/python1903$ git reset HEAD a1.txt
    重置后取消暂存的变更：
    M	a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    fjsgjghrg
    yangyang@yangyang-host:~/Desktop/python1903$ git checkout -- a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1
    cat: a1: 没有那个文件或目录
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello

c.改动了工作区，add了暂存区,commit到了版本库，取消操作

    yangyang@yangyang-host:~/Desktop/python1903$ ls
    a1.txt  b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    yangyang@yangyang-host:~/Desktop/python1903$ vim a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git add a1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "fahjfh"
    [master 3f368e9] fahjfh
     1 file changed, 1 insertion(+)
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    my boss is stupid
    yangyang@yangyang-host:~/Desktop/python1903$ git reset --hard HEAD^
    HEAD 现在位于 94ac33b bbbb
    yangyang@yangyang-host:~/Desktop/python1903$ cat a1.txt 
    hello
    yangyang@yangyang-host:~/Desktop/python1903$ 

4.3删除文件

    yangyang@yangyang-host:~/Desktop/python1903$ rm -rf b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git status 
    位于分支 master
    尚未暂存以备提交的变更：
      （使用 "git add/rm <文件>..." 更新要提交的内容）
      （使用 "git checkout -- <文件>..." 丢弃工作区的改动）
    
    	删除：     b1.txt
    
    修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
    yangyang@yangyang-host:~/Desktop/python1903$ git rm b1.txt 
    rm 'b1.txt'
    yangyang@yangyang-host:~/Desktop/python1903$ git status 
    位于分支 master
    要提交的变更：
      （使用 "git reset HEAD <文件>..." 以取消暂存）
    
    	删除：     b1.txt
    
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "delete b1.txt"
    [master fb1c3a9] delete b1.txt
     1 file changed, 1 deletion(-)
     delete mode 100644 b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git status 
    位于分支 master
    无文件要提交，干净的工作区
    yangyang@yangyang-host:~/Desktop/python1903$ ls
    a1.txt

注意：删除工作区的文件，同时也要删除版本库中的文件git rm xxxx

5.远程仓库

5.1.添加公钥

    yangyang@yangyang-host:~$ ssh-keygen -t rsa -C "18501970795@163.com" #生成公钥
    Generating public/private rsa key pair.
    Enter file in which to save the key (/home/yangyang/.ssh/id_rsa): 
    Created directory '/home/yangyang/.ssh'.
    Enter passphrase (empty for no passphrase): 
    Enter same passphrase again: 
    Your identification has been saved in /home/yangyang/.ssh/id_rsa.
    Your public key has been saved in /home/yangyang/.ssh/id_rsa.pub.
    The key fingerprint is:
    SHA256:LR/i972+f1tN40OCte27ZcUWFM+PHzDDf7+3kfDio6I 18501970795@163.com
    The key's randomart image is:
    +---[RSA 2048]----+
    |               o.|
    |            . ...|
    |             * .o|
    |         .  o Boo|
    |        S o. +.*B|
    |       . + .  B+O|
    |        . o  . BB|
    |         o ..o..X|
    |       E. ..oo*XB|
    +----[SHA256]-----+
    yangyang@yangyang-host:~$ pwd
    /home/yangyang
    yangyang@yangyang-host:~$ cd .ssh/
    yangyang@yangyang-host:~/.ssh$ ls
    id_rsa  id_rsa.pub
    yangyang@yangyang-host:~/.ssh$ cat id_rsa.pub   #验证是否连接成功
    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAKtv0BhR0VUZsnqc/3TVcPNmqOHpcqH+r03yamwJNl4CK6t6XYEy1QnZNI5w56altWK6XYvadv1FAZCv9LNbQxxouXwof2MPwY+nwSORXyOvSKQbJ8Subtwe7x7jKTjf/n22L2DRz82M9lzKfyzX+VLGkgw1uSHtk7Z1+DfvyBB2QpYX3FTTO+3AZH6yfW3ocyIQlITCexo6W4nWlPBsIC63QqBPgBKhpju4dJuOOJ9Cqsaj4nyULG3SAziei8r8jvVa70QTG7oDRHLVZWpOBd93w8Pva0BnTkIkL2yuJ2ZG76tg1f4G2EPiF5XjfzNn/cPh41a44ROSl5GdX/tg7 18501970795@163.com
    yangyang@yangyang-host:~/.ssh$
      
    You've successfully authenticated, but GitHub does not provide shell access.

5.2添加远程仓库并推送

    yangyang@yangyang-host:~$ cd Desktop/
    yangyang@yangyang-host:~/Desktop$ cd python1903/
    yangyang@yangyang-host:~/Desktop/python1903$ git remote add origin git@github.com:yangyang-git/python1903.git    #建立本地和远程之间的连接，origin可以是任意的名称，但是，尽量使用origin，表示是远程仓库
    yangyang@yangyang-host:~/Desktop/python1903$ git push -u origin master #将本地版本库中的内容推送到远程，只有第一次push的时候使用-u，其他不需要，这个步骤主要建立本地master和远程master之间的连接
    Warning: Permanently added the RSA host key for IP address '52.74.223.119' to the list of known hosts.
    枚举对象: 11, 完成.
    对象计数中: 100% (11/11), 完成.
    使用 2 个线程进行压缩
    压缩对象中: 100% (6/6), 完成.
    写入对象中: 100% (11/11), 914 bytes | 19.00 KiB/s, 完成.
    总共 11 （差异 0），复用 0 （差异 0）
    To github.com:yangyang-git/python1903.git
     * [new branch]      master -> master
    分支 'master' 设置为跟踪来自 'origin' 的远程分支 'master'。
    yangyang@yangyang-host:~/Desktop/python1903$ ls
    a1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ touch b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ vim b1.txt 
    ayangyang@yangyang-host:~/Desktop/python1903$ git add b1.txt 
    yangyang@yangyang-host:~/Desktop/python1903$ git commit -m "fajigj"
    [master 4e739e5] fajigj
     1 file changed, 1 insertion(+)
     create mode 100644 b1.txt
    yangyang@yangyang-host:~/Desktop/python1903$ git push origin master
    枚举对象: 4, 完成.
    对象计数中: 100% (4/4), 完成.
    使用 2 个线程进行压缩
    压缩对象中: 100% (2/2), 完成.
    写入对象中: 100% (3/3), 273 bytes | 273.00 KiB/s, 完成.
    总共 3 （差异 0），复用 0 （差异 0）
    To github.com:yangyang-git/python1903.git
       fb1c3a9..4e739e5  master -> master
