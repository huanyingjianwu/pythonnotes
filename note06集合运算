

二、集合set

1.概念

在Python中的集合和数学上的集合是相同的

特点：其中不允许出现重复元素，可以进行交集和并集的计算

本质：无序且无重复元素的集合

2.set的创建

list:[]   tuple:()    dict:{}    set:{}

    #1.注意1：dict和set都使用{}表示，如果未空，则默认表示dict
    s1 = {}
    print(type(s1))   #<class 'dict'>
    
    #2.创建空集合:set()  list()   tuple()   dict()
    s2 = set()
    print(s2,type(s2))
    s2 = set([])
    print(s2,type(s2))
    s2 = set(())
    print(s2,type(s2))
    s2 = set({})
    print(s2,type(s2))
    
    #3.创建非空集合
    set1 = {23,34,3}
    print(set1,type(set1))
    set1 = set([23,34,3])
    print(set1,type(set1))
    set1 = set((23,34,3))
    print(set1,type(set1))
    #注意2：通过dict生成一个set，只会将key生成set
    #set实际上是存储了字典中的key【无序且不能重复】
    set1 = set({"a":1,"b":2})
    print(set1,type(set1))
    set1 = set("23643")   #('2', '6', '4', '3')
    print(set1,type(set1))
    
    
    #4.注意3：set中的元素存放的顺序和内存中存储的顺序不同
    #注意4：set中不允许存储重复元素【可以自动将重复的元素过滤掉】
    list1 = [23,43,4,3,4,4,4,4,4]
    tuple1 = (23,43,4,3,4,4,4,4,4)
    set2 = {23,43,4,3,4,4,4,4,4}
    print(list1)
    print(tuple1)
    print(set2)
    
    #需求：去除列表中的重复元素
    list1 = [23,43,4,3,4,4,4,23,23,4,4]
    
    #a.删除列表中某个指定的重复元素
    key = 4
    #注意：如果for循环仅仅是为了控制次数，变量名可以采用_
    for _ in range(list1.count(key) - 1):
        list1.remove(key)
    print(list1)  #[23, 43, 3, 23, 23, 4]
    
    #b.去除列表中的重复元素
    #思路：定义一个新列表，为空，遍历原列表，判断每一个元素在新列表中是否存在，如果不存在，则添加，如果存在，则忽略
    list1 = [23,43,4,3,4,4,4,23,23,4,4]
    list2 = []
    for num in list1:
        if num not in list2:
            list2.append(num)
    print(list2)
    
    #c.利用set的去重原理
    list1 = [23,43,4,3,4,4,4,23,23,4,4]
    set1 = set(list1)
    print(set1)
    list2 = list(set1)
    print(list2)

3.set的使用

    #1.添加
    #1.1add(),添加
    s1 = {1,2,3,4}
    print(s1)
    #a.添加单个元素
    s1.add(5)
    print(s1)
    #b.添加多个元素
    #s1.add([6,7,8])  #TypeError: unhashable type: 'list'
    s1.add((6,7,8))
    #s1.add({"a":1,"b":2})   #TypeError: unhashable type: 'dict'
    print(s1)
    
    #结论：通过add向集合中添加元素，可以直接添加单个元素，但是，如果要添加多个元素，
    # 只能以元组的方式添加，因为元组是不可变的，但是，添加的时候，是将整个元组作为一个整体添加到集合中
    #因为列表和字典是可变的，不是哈希的类型，所以不能添加
    
    #1.2update()，更新
    s1 = {1,2,3,4}
    print(s1)
    #a.添加单个元素,注意：只能添加可迭代类型，比如string
    #s1.update(5)  #TypeError: 'int' object is not iterable可迭代对象
    s1.update("fhajhf")
    print(s1)
    #b.添加多个元素,注意：打碎加入
    s1.update([6,7,8])
    print(s1)
    s1.update((9,10))
    print(s1)
    s1.update({"a":1,"b":2})
    print(s1)
    
    #注意：set中的add和update的区别和list中的append和extend相同
    
    
    #2.删除
    #remove()
    s2 = {1, 2, 'f', 3, 4, 'h', 'a', 'j'}
    s2.remove(2)
    print(s2)
    
    #3.遍历
    s2 = {1, 2, 'f', 3, 4, 'h', 'a', 'j'}
    #方式一
    for i in s2:
        print(i)
    
    #方式二
    for i,ele in enumerate(s2):
        print(i,ele)
    
    #4.交集和并集
    set1 = {1,2,3,4}
    set2 = {3,4,5,6}
    
    #交集：&【按位与】
    r1 = set1 & set2
    print(r1)
    
    #并集：|【按位或】
    r2 = set1 | set2
    print(r2)

三、简单的算法

1.排序

需求：求列表中元素的最大值

    #需求：求列表中元素的最大值
    #假设法
    
    list1 = [34,54,2,3,545,54,87]
    
    #方式一
    #定义一个变量，用于记录最大值，初始值为列表中第0个元素
    maxValue = list1[0]
    for num in list1:
        if num > maxValue:
            maxValue = num
    print("列表中的最大值为:%d" % (maxValue))
    
    #方式二：优化，maxvalue没有必要和第0个元素进行比较
    maxValue = list1[0]
    maxIndex = 0
    for i in range(1,len(list1)):
        if list1[i] > maxValue:
            maxValue = list1[i]
            maxIndex = i
    
    print("列表中的最大值为:%d,所在的位置为：%d" % (maxValue,maxIndex))
    
    #需求：求列表中的第二大值以及所在的位置
    list1 = [34,54,2,87,3,545,54,87,545,545]
    #a.拷贝
    list2 = list1.copy()
    #b。寻找最大值
    maxValue = list1[0]
    for num in list1:
        if num > maxValue:
            maxValue = num
    
    #c.删除最大值
    for _ in range(list1.count(maxValue)):
        list1.remove(maxValue)
    print(list1)
    #d.寻找剩余元素的最大值
    secondValue = list1[0]
    for num in list1:
        if num > secondValue:
            secondValue = num
    
    #e.通过第二大值和副本中的元素进行比对
    for i in range(len(list2)):
        if secondValue == list2[i]:
            print("第二大值所在的位置：%d" % (i))

1.1冒泡排序

排序思路：比较两个相邻下标对应的元素，如果符合条件则交换位置

    #冒泡排序，以升序为例
    
    list1 = [3,54,1,3,645,632,23,345]
    
    #外层循环：控制比较的轮数
    for i in range(len(list1) - 1):
        #内层循环：控制每一轮比较的次数兼顾参与比较的下标
        for j in range(len(list1) - i - 1):
            #小下标对应的元素 > 大下标对应的元素
            if list1[j]  > list1[j + 1]:
                list1[j],list1[j + 1] = list1[j + 1],list1[j]
    print(list1)
    
    
    """
    问题：
        索引越界：IndexError: list index out of range
    原因：
        以5个元素为例，下标0~4
        for i in range(len(list1) - 1)的取值范围为0~3
        for j in range(len(list1) - i)
            len(list1) - i，当i = 0,len(list1) - i = 5，range(5)，j取值范围为0~4，j + 1的取值范围为1~5
    解决：
        for j in range(len(list1) - i- 1)
    """

1.2选择排序

排序思路：固定一个下标，然后用该下标对应的元素和列表中的其他元素进行依次比较，如果符合条件则交换位置

    #选择排序，以升序为例
    
    list1 = [3,54,1,3,645,632,23,345]
    
    #外层循环：控制比较的轮数
    for i in range(len(list1) - 1):
        #内层循环：控制每一轮比较的次数兼顾参与比较的下标
        for j in range(i + 1,len(list1)):
            if list1[i] > list1[j]:
                list1[i],list1[j] = list1[j],list1[i]
    print(list1)

2.查找

2.1顺序查找

查找思路：遍历指定列表，将待查找元素和列表中的每一个元素进行依次的比对

2.2二分法查找

查找思路：二分法查找的前提必须是排好序的列表【升序或者降序】

		  通过折半来缩小查找范围，提高查找效率【以升序为例，将待查找元素和指定列表中中间下标对应的元素比较，如果带查找元素大于中间下标对应的元素，则说明待查找可能存在于后半段】		

    #二分法查找，以升序为例
    
    list1 = [1, 3, 3, 23, 54, 345, 632, 632, 645, 645, 645]
    
    key = 10
    
    #定义两个变量，用于记录下标的最值
    #下标最小值
    left = 0
    #下标的最大值
    right = len(list1) - 1
    
    #查找条件：如果left和right相等，还未查找到，则表示被查找数据在列表中不存在的
    while left <= right:
    
        #计算中间下标
        middle = (left + right) // 2
    
        #将待查找元素和中间下标对应的元素进行比较大小
        if key > list1[middle]:
            #重新给left赋值
            left = middle + 1
        elif key < list1[middle]:
            #重新给right赋值
            right = middle - 1
        else:
            print("待查找元素%d的下标为:%d" % (key,middle))
            #有可能循环还未结束，但是已经得到了结果，可以提前结束循环
            break
    else:
        print("未查找到指定元素")
    
    #注意：如果while循环中出现了break语句，该break语句一旦被执行，则else语句没有执行的机会

四、字符串string

1.概念

字符串就是由零个或者多个任意的字符组成的有限序列

使用单引号或者双引号括起来的任意文本，任意文本包括字母，数字，特殊符号，中文等

注意：字符串属于不可变的数据类型，类似于元组【一个字符串一旦被定义，将不能做任何改变，一旦需要对字符串进行修改，则一定表示生成一个新的字符串】

工作原理：字符串的底层维护了一个用该字符串中的字符作为元素的元组

	举例：“abcd” ----->("a","b","c","d")

2.创建

    #字符串的定义
    #双引号
    str1 = "abc123%中文"
    print(str1)
    #单引号
    str2 = 'abc\n123\n%\n中文'
    print(str2)
    
    #三引号【多行注释】；可以在其中进行任意的换行【可以将其中的内容原样输出】
    str3 = """abc
    123
    %%%%
    中文"""
    print(str3)
    print(type(str3))
    
    #注意：Python不支持单字符类型,只有字符串类型
    #Java:char表示单个字符，"a" ,str表示字符串

3.运算

    #1.字符串连接：+
    #注意：字符串 + 字符串 = 字符串
    s1 = "hello"
    s2 = "Python"
    print(s1 + s2)
    print(s1)
    
    #字符串和其他的数据类型之间无法进行加法运算
    #print(s1 + 10)
    
    
    #2.字符串重复：*
    print("*" * 30)
    print(s1 * 3)
    
    #3.获取字符串中的字符
    #字符串和list以及tuple一样，通过索引的方式访问字符
    #语法：字符串名[索引]
    #索引的取值范围：0~len - 1   或者   -1  ~ - len
    s3 = "23453hfajg"
    print(s3[1])
    print(type(s3[1]))
    
    print(len(s3))
    
    
    #4.切片
    str1 = "12345abcdef"
    print(str1[2])   #3
    print(str1[2:])  #345abcdef
    print(str1[:2])  #12
    
    #print(str1[11])  #报错
    print(str1[11:])  #""
    print(str1[2:5])  #345
    
    # "12345abcdef"
    print(str1[2:5:-1])  #""
    print(str1[5:2:-1])  #a54
    print(str1[5:2])   #""
    
    print(str1[-1:-4])  #""
    print(str1[-1:-4:-1])  #fed
    print(str1[-4:-1])  #cde
    
    print(str1[-4:-1:-1])   #“”
    print(str1[::-1])   #
    print(str1[0:-1])  #12345abcde
    
    print(str1[0:-1:-1])  #"'
    print(str1[-11:10])   #12345abcde
    print(str1[-11:10:-1])  #""

    #1.判断字符串是否包含某个指定的字符
    s1 = "hello fhafh 432"
    
    print("hello" in s1)
    print("hell432" in s1)
    
    #2.格式化
    #%d  %f   %s
    print("姓名：%s，年龄：%d" % ("zhangsan",18))
    #format()
    
    #a。不指定位置，按照默认的顺序进行格式化
    str1 = "{}-{}-{}".format("zhangsan","lisi",100)
    str2 = "%s-%s-%d" % ("zhangsan","lisi",100)
    print(str1)
    print(str2)
    
    #b.设置位置,会将format中的数据从0开始编号，一个编号对应的数据可以被重复使用
    str3 = "{}-{}".format("aaa","bbbb","ccc","ddd")
    print(str3)
    str3 = "{3}-{0}".format("aaa","bbbb","ccc","ddd")
    print(str3)
    str3 = "{3}~~~~{0}~~~~{0}".format("aaa","bbbb","ccc","ddd")
    print(str3)
    
    str4 = "姓名：{2}，年龄：{0}，体重：{1}".format(18,172.0,"zhangsan")
    print(str4)
    
    #format的好处：不需要关心数据的类型问题
    
    #3.转义字符:使用\改变后面字母或者符号的含义
    #注意：可以将普通字母转换为特殊，也可以将特殊转换为普通
    str1 = "\\"
    print(str1)
    
    #"hello"
    str2  = "\"hello\""
    print(str2)
    
    #encode:编码   decode；解码
    str3 = "C:\\Users\\Administrator\\Desktop\\XA-Python1903\\Day6\\笔记"
    print(str3)
    #r""一般应用在路径表示和正则表达式
    str4 = r"C:\Users\Administrator\Desktop\XA-Python1903\Day6\笔记"
    print(str4)
    
    #\n:换行  \t:tab键
    print("helloworld")
    print("hello\nworld")
    print("hello\tworld")

4.常用功能

    #1.获取字符串的长度
    str1 = "fahfjgf453627456237"
    print(len(str1))
    
    #2.统计一个字符出现的次数
    print(str1.count("f"))  #默认查找整个字符串
    print(str1.count("f",10,15))  #指定查找的区间
    
    #3.isdigit(),判断一个字符串不为空，其中的字符是全数字，则返回True
    print("".isdigit())
    print("abc".isdigit())
    print("123".isdigit())
    print("123abc".isdigit())
    
